## ALIASES START ##

#Enable bash aliases for new terminals: add to ~/.bash_profile or ~/.profile or ~/.bashrc
#source "~/.aliases/trk.aliases" -> this is where you should put this file

#switch to root
alias beroot='sudo su'

## Colorize the ls output ##
alias ls='ls --color=auto'
 
## Use a long listing format ##
alias ll='ls -la'
 
## Show hidden files ##
alias l.='ls -d .* --color=auto'


## a quick way to get out of current directory ##
alias ..='cd ..'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'


## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# handy short cuts #
alias h='history'
alias j='jobs -l'
alias c='clear'
alias path='echo -e ${PATH//:/\\n}'

# Stop after sending count ECHO_REQUEST packets #
alias ping='ping -c 5'
# Do not wait interval 1 second, go fast #
alias fastping='ping -c 100 -s.2'

#show open ports
alias ports='netstat -tulanp'

#show open with pID/Directory
alias ports='netstat -a -n -o'

## download file continue partially downloaded.
alias wget='wget -c'

# open browser
alias chrome='/opt/google/chrome/chrome'
alias browser=chrome

#Grabs the disk usage in the current directory
alias usage='du -ch | grep total'

#Gets the total disk usage on your machine
alias totalusage='df -hl --total | grep total'

#Shows the individual partition usages without the temporary memory values
alias partusage='df -hlT --exclude-type=tmpfs --exclude-type=devtmpfs'

#Gives you what is using the most space. Both directories and files. Varies on
#current directory
alias most='du -hsx * | sort -rh | head -10'

#untar the tar ball
alias untar='tar -zxvf'

# make basic commands interactive and verbose
alias cp='cp -iv'      # interactive
alias rm='rm -ri'      # interactive
alias mv='mv -iv'       # interactive, verbose

# starts nano with line number enabled
alias nano='nano -c'

#search CLI helper
alias search-help="echo '
grep -rnw </path/to/somewhere/> -e <pattern> = search recursive for pattern
grep --include=\*.{c,h} -rnw </path/to/somewhere/> -e <pattern> = search recursive only for <c,h> extensions
grep --exclude=*.o -rnw </path/to/somewhere/> -e <pattern> = search pattern excluding <o> extension.
grep --exclude-dir={dir1,dir2,*.dst} -rnw </path/to/somewhere/> -e <pattern> = search directories excluding dir1,dir2, matches *.dst

find <path> -name <file system object name> : searchs object for given folder recursively
find <path> -type f -name < <q>*.conf</q> > : search .conf extension objects which are file. (f-file, d-direc, l-sym link)
'
"


#vim remember

alias vim-help="echo 'opening file : vim <filename>
editing mode : press a key
stop editing or command mode : ctrl + c
exit : ctrl + c :q
exit without save : ctrl c + :q!
save : ctrl c + :w
save and quit text editor : ctrl + c : wq
start/stop character selection = v
cursor moving while selection = arrow keys, shift, page up down
cut selection = v(start selection) + d
copy selection = v(start selection) + y
copy line = yy
delete line = dd
delete word = dw
paste = p
undo = u
re do = ctrl + r
search = :/search-text (n to next found one)
reverse order search = :?search-text
go to first line = gg '
"

#nano remember
alias nano-help="echo 'usage
nano name.txt - > name txt opens if not exist creates.
ctrl + shift + arrow - > select the text
ctrl + k - > cut chars(kind of delete), ctrl + u -> uncut cutted (re-do)
ctrl + w - > search text
ctrl + c -> shows current line
alt + g - > go to line
alt + 6 - > copy text
ctrl + u - > paste text 
'
"

## LINUX BASICS HELPER ##
alias dir-help="echo '
Directory / file management.

cp foo.txt boo.txt - > copy foo.txt create a boo.txt
cp -r foo boo -> copy content of foo directory to boo directory
rm foo.txt -> delete foo.txt
rm -r foo -> remove all subdirectories of foo.
mv foo.txt /dir/boo.txt - > moves(can be used as replacing name of files and directories) foo.txt to inside of dir as a boo.txt
ls -lrt - > list not hidden objects, ls -lha show with hidden files.
mkdir dir - > creates directory called dir
mkdir -p ./dir/sub/folder - > creates multiple dir inside each other.
'
"

alias npm-help="echo '
npx kill-port <port nm> : kills the runningb application o given port
"


alias text-help="echo '
Text editing / showing without tool
head -n 100 foo.txt - prints first 100 lines of text
tail -f 100 boo.txt - prints and follows last 100 lines of text
cat foo.txt - prits all content of foo to cli'
"

alias compress-help ="echo '
zip <zip-file-name> foldername/ = creates a zip file from foldername directory.
unzip <zip-file-name> = decompress
tar -czvf deneme.tar.gz abc.txt = creates deneme tar file by compressing abc.txt
tar -zxvf <tar-file-name> = decompress tar file name
'
"

alias package-help="echo '
Package Management 
/etc/apt/sources.list : this file is your os’s remote origin for checking versions of softwares installation/upgrade
sudo apt-get update : updates existing dependecy packages of os
sudo apt-get install name-of-software : installs software by looking your os version in remote origin and finds compatible latest version and installs it.
apt-cache program-name : search remote origin for the typed name and list.
apt-cache show netcat : show installed netcat softwares metadatas.
apt-get upgrade : upgrades existing system packages
apt-get install packageName --only-upgrade : only upgrades packageName
sudo apt-get install vsftpd=2.3.5-3ubuntu1 : only installs spesific version of software
sudo apt-get remove vsftpd : remove program without its config files(maybe you need it in future)

sudo apt-get purge vsftpd : remove proram with config. files.
sudo apt-get purge --auto-remove <package-name> : deletes all files also configs (sudo apt-get install autoremove) 

add-apt-repository ppa:user/ppa-name : ppa is a private repository and its not verified. with this command you add to your repository dependcy files this spesific repository. Next install will cover this repo as well.
dpkg -i <.deb file> : install .deb application (after making it executable)
dpkg -l : list installed apps on debian

'
"


alias user-help="echo '
User / Group Management
/etc/passwd - > file keeps the existing user info
/etc/group - > file keeps groups info.
/home/<uname> - > folder keeps user spesific files. ( like C/users in win.)
$whoami, id - > outputs current users info

Being a superuser means that you are a group member of “sudo” group. That is all.

su - foo - > switch existing user to foo.
sudo useradd -m olivia - > creates user called olivia. 
sudo passwd olivia - > to change olivia user’s password. after typing this command st.input opens and asks for password input
userdel --remove olivia - > deletes olivia user.
sudo addgroups <group-name> -> creates groupName called group
sudo usermod -a -G <group-name> olivia - > adding olivia to <group-name> group. (super user group name is sudo)
getent group groupName - > to list users in the groupName
sudo chsh -s /bin/bash <username> : changing default terminal of a user. (should be done after creation)

root and superuser is the same. root is first created user and it has superuser rights.
'
"

alias file-help="echo '
File Permissions
-rw-rw-r--  : first “-” means file. 3 letters after that consequently, owner; group; all others permission. r : read, w : write, x: execute.
drwxrwxr-x 2 user user-group 4096 Oct 30 10:38 dir-name : its a directory, user can do all, user-group owners can do all, others can do all except writing.

chmod 640 file - > 4 - 2^2 = read, 2 = 2^1 = write, 1 = 2^0 = execute. 6 owner write | 4 group write | 0 for others. 6 = 4 + 2 (read + write)

sudo chown testuser foo - > change owner to testuser of foo(file or directory)

sudo chown -R :testGroup /testDirectory - > owner of testDirectory will the testGroup group.
'
"

alias env-help="echo '
Environment Settings
$PATH - > path environment variable (%PATH% of windows)
/usr/lib/jvm/ -> where jdk auto installed.
export PATH=$PATH:$JAVA_HOME/bin : java home path setting
~/.bashrc : this file is responsible for executing written lines before every terminal opening. So in order to set environment variables permanently, you need to add those commands to this file.
how to add commands when startup : ubuntu startup application, just add your command.
'
"

alias mongo-help="echo '
Debian x Ubuntu 
sudo service mongod start : start mongo
sudo service mongod stop : stop mongo
sudo service mongod restart : restart mongo
sudo service mongod status : to ask service status of mongo
mongo : open cli interface for mongo
"/var/log/mongodb/mongod.log" : mongo logs


'
"
alias wls-help="echo '
/mnt/c : where your c drive located

'
"


alias postgres-help="echo '
sudo service postgresql start : start
sudo service postgresql stop : stop
sudo service postgresql restart : restart
sudo service postgresql status : show service status


psql : opens postgresql CLI - "q" key leaves.
psql -U my_user : connect postgres with given user. This user is the user you provide your app. Default is "postgres". You can create.
psql -U my_user -d my_db : connect user and database (if allowed to access), if you dont provide -d it auto tries to connect same db as user's.

-- Inside postgres CLI -- 
\l : list databases
\c <database-name> : connect named database
\du : list postgres users -- this is not linux user these are DB users -- 
\q : quit postgress CLI session
CREATE DATABASE <name-of-db>; : createa DB of given name
CREATE USER my_user WITH PASSWORD 'my_password'; : create user
ALTER USER my_user WITH SUPERUSER; : give user SuperUser rights.
ALTER USER postgres WITH PASSWORD 'my_password'; : change DB user name to given password.


NOTES : 
by default owner user is "postgres" (this is linux user)
"/etc/postgresql/11/main/pg_hba.conf" : postgresql user auth file.

1- find 
"local   all             postgres                                peer" 
2- replace 
"local   all             postgres                                md5"

when "peer" it expects you to connect postgre with using same user name as your linux os.
'
"

alias docker-help="echo '
systemctl start docker : start docker
systemctl stop docker : stop docker
systemctl restart docker : restart docker

docker image build --tag <tag-name> <directory-contains-docker-file> : creates a docker image according to docker file contained by dir. With given tag.
(e.g -> sudo docker image build --tag tnural/ase:micro-serviceregistry .)
docker run -d redis --volume ~/logs:/logs/inside-container: runs "redis" image. If redis locally not found looks official docker-hub.
docker stop <container-id> : stops running container
docker container ls / docker ps : lists infos of running containers. 
docker image ls / docker images : lists existing images
docker login --username <uname> --password <password> <registry-location> : to login remote registry
docker logs <first-3-letter-of-container-id> : shows the sysout of running instance
docker volume ls : list volumes
docker volume create --name <volume-name> : creates volume, by defaut  binds it to -var/lib/docker/volumes/-
docker commit <container-name> <repo:tag> : commit of existing container as an image
docker ps -a -q = kill all running containers.
docker push tnural/myrepo:nodejs : (after commit) tnural is my user, myrepo is repo i created. Nodejs that i gave that container as an image name.
docker build --tag <tag-name> : build given tag image
docker push <tag-name> : push created image to remote
docker pull <image-name> : gets docker image from remote registery (default docker-hub)
docker exec -i -t <container-name> /bin/bash : to access docker base os shell ("exit" to return back host os shell)
ctrl+p+q ( to exit docker process shell )
docker inspect <container-name> : shows deailed information related with container
docker image rm -f <image-id> : removes image with force
docker container rm -f <container-id> : removes container with force

docker-compose up -d = looks for docker-compose.yml file and initialize containers written inside.
docker-compose up --scale <name-of-container>=5 --force-recreate --detach : scale services
docker-compose stop
docker-compose rm -f
docker-compose pull   
docker-compose up -d


Docker web-based GUI : https://www.portainer.io/installation/
to run portainer
docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
 
'
"

alias firebase-help="echo '
firebase init
firebase deploy
npm run serve
'
"

alias mac-help="echo '
launchctl = systemctl in mac
'
"

alias cron-help="echo '
crontab -e : edit crons
crontab -l : list running crons
'
"

alias brew-help="echo '
brew search <name-of-app> : search app with like (not exact)
brew install <name-of-app> : install app
brew install <name-of-app>@version: install specific version
brew remove <name-of-app> : purge app
'
"


alias kubernetes-help="echo '

**INSTALLATION**

create 2vcpu instance
sudo swapoff -a
vim /etc/fstab (search swap and comment out)
create kubernetesuser and make it sudoers
su kubernetesuser
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt-get update
**docker-install**
https://docs.docker.com/install/linux/docker-ce/ubuntu/
**docker-install*
sudo apt-get install -y kubelet kubeadm kubernetes-cni
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
sudo mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
#make master node to be able to schedule pods(normally scheduling pods happen in slave nodes) if you need only one node make this.
kubectl taint nodes --all node-role.kubernetes.io/master-
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
kubectl apply -f <deployment.yml>  : deploy deployment image
kubectl apply -f <service.yml> : to make containers interact with each other you need to run this command.


**RESET**
sudo kubeadm reset
sudo apt-get purge kubeadm kubectl kubelet kubernetes-cni kube*
sudo apt-get autoremove
sudo rm -rf ~/.kube

**RESTART**


By default when kubernetes connection to wifi adapter is lost, it requires structure to re-crated.
sudo kubeadm reset
sudo rm -rf ~/.kube
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
sudo mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#to test
kubectl get nodes;
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml



**HOW TO INSTALL WEB UI OF KUBERNETES**

#Tutorial : https://www.replex.io/blog/how-to-install-access-and-add-heapster-metrics-to-the-kubernetes-dashboard
#use the https://github.com/kubernetes/dashboard kubernetes-dashboard.yml GIVEN IN THE DESCRIPTION OF GITHUB PROJECT file to create pod as a dashboard.
sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml

Kubectl proxy

#expose kubernetes API to internet
kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'

Dashboard URL
http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

HOW TO INSTALL DASHBOARD SERVICE ACCOUNT
#Kubernetes user creation :
kubectl create serviceaccount dash-admin
#Giving it dashboard-admin role :
kubectl create clusterrolebinding dash-admin --clusterrole=cluster-admin --serviceaccount=default:dash-admin
#Show list of key pair list of users: 
kubectl get secrets
#Get details of key pair : 
kubectl describe secret <name-of-secret>

**ERROR HANDLING**

#Connection refused error:
You should copy config file.

#swap area error / kubernetes no route to host error :

swapoff -a
vim /etc/fstab (search swap and comment out)

#Auth bug
if you get 404 error even though true public key provided to API, just click on some tabs on web UI you will not be redirected to login page.	
'
"


alias curl-help="echo '
curl https://tariknural.com : prints response of server
curl -i / -I tariknural.com : get response with headers / get only headers.
curl -X GET/POST <address> : define HTTP method.
curl -L tariknural.com : follows the redirect and gets the result after redirect event happens.
curl -o file.html <address> : store the response in file.html
curl -d <json-data> -H <dq>Content-Type: application/json<dq> -X POST https://tariknural.com/ : passing post data example
curl -d <dq>file.json<dq> -X POST https://tariknural.com : passing data with file

'
"

alias angular-help="echo '
npm install --global @angular/cli : install angular CLI via npm
ng new --defaults=true <project-name> : creates a project with given name
ng serve : starts angulars development applicaton server
ng generate class <class-name> --skipTests : creates class under /app/ folder.
ng generate component <component-name> : creates components and adds to appmodule.ts
ng build : builds angular project, 

'
"

alias lamp-help="echo '
service apache2 start-stop-reload-status : apache web server commands
service mysql start-stop-reload-status : mysql db commands

'
"

alias maven-help="echo '
Maven : build - dependency manager.
clean : cleans target directory
compile : compiles code 
install : install the archive file into local repo
package : takes the compiled code and puts it into a archive file format(jar,war)
test : runs the tests
verify : checks project qualify the quality criterias
deploy : copies the archived project into remote project folder
'
"

alias vscode-help="echo '
ctrl+shift+p = open command palette(ctrl+3 of eclipse)
settings.json = vscode settings file
preview=opening files not as a new tab(disable it)
'
"


alias useful-help="echo '
USEFUL NON-CATEGORIZED COMMANDS
ps aux -> list current running procceses.
lsb_release -a - > shows current linux version running
kill 15 2342 - > terminates the process id 2342. ( default when you just type kill 2342)
kill 9 2342 - > kills without waiting termination. (this can’t be ignored by the process received signal)
kill -l -> shows the signals of different type of killing.
fuser -k 8080/tcp -> kill spesific app running on given port
'
"

alias ssh-help="echo '
 SSH path 
 ~/.ssh
'
"


alias solutions-help="echo '

SEVERAL SOLUTIONS
Command Line File Manager

Midnight Commander (mc) - http://linuxcommand.org/lc3_adv_mc.php

Touchpad gestures for ubuntu

https://askubuntu.com/questions/1034624/touchpad-gestures-in-ubuntu-18-04-lts

How to create shortcut for an executor

https://unix.stackexchange.com/questions/388298/how-to-create-a-shortcut-for-eclipse

How to change shell of ubuntu

chsh -s /bin/bash - > bash is ubuntu’s default shell. 
To Change it to Fish shell chsh -s 

Windows Management Of SubSystem Linux

/mnt/c - > C drive located in windows ubuntu subshell.

Add a application to Launcher(search bar of ubuntu)

http://donovanbrown.com/post/Adding-Eclipse-to-Launcher-on-Ubuntu-1604

Screenshot and replace printscreen

https://www.maketecheasier.com/flameshot-take-better-screenshots-ubuntu/

Custom gradle installation 

http://yallalabs.com/devops/how-to-install-gradle-ubuntu-18-04-ubuntu-16-04/

'
"


